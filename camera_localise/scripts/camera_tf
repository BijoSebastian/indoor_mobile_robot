#!/usr/bin/env python

import rospy
import rospkg
import tf
from tf.transformations import quaternion_from_euler
import numpy as np
import yaml
import io

from geometry_msgs.msg import TransformStamped
from apriltag_ros.msg import AprilTagDetectionArray
from geometry_msgs.msg import PoseWithCovarianceStamped

def get_tag_tf(msg):
	current = rospy.Time.now()
	T = {}
	listener = tf.TransformListener()
	for det in msg.detections:
		tag_str = 'tag_'+str(det.id[0])
		listener.waitForTransform(tag_str,'camera',rospy.Time(), rospy.Duration(1.0))
		(trans,rot) = listener.lookupTransform(tag_str,'camera',rospy.Time())
		T[det.id[0]] = listener.fromTranslationRotation(trans, rot)
    			
	return T
	
def get_tag_world():
	tags_dict = {}
	rospack = rospkg.RosPack()
	base_path = rospack.get_path('camera_localise')
	with open(base_path+"/config/tag_covdata.yaml", 'r') as stream:
		tags = yaml.safe_load(stream)
		tags = tags['standalone_tags']
		for i in tags:
			tags_dict[i['id']] = tf.transformations.compose_matrix(angles=(i['ex'],i['ey'],i['ez']),translate=(i['x'],i['y'],i['z']))
		
	return tags_dict
	
def get_camera_tf(tags_dict,T_dict):
	tlist = []
	for key in T_dict.keys():
		tlist.append(np.matmul(tags_dict[key],T_dict[key]))
	T = sum(tlist)/len(tlist)
	quat = tf.transformations.quaternion_from_matrix(T)
	pos = tuple(T[0:3,3])
	return pos,quat
	
def send_camera_pose(msg):
	# tros = tf.TransformerROS(cache_time=rospy.Duration(200.0))
	tags = get_tag_world()
	br = tf.TransformBroadcaster()
	q_rc = tf.transformations.quaternion_from_euler(0,-1.5708,-1.5708)
	q_wr = tf.transformations.quaternion_multipy(q_cw,q_rc)
	robotpose = PoseWithCovarianceStamped()
	robotpose.PoseWithCovarianceStamped.pose.pose.position.x = p_cw[0]
	robotpose.PoseWithCovarianceStamped.pose.pose.position.y = p_cw[1]
	robotpose.PoseWithCovarianceStamped.pose.pose.position.z = p_cw[2]
	robotpose.PoseWithCovarianceStamped.pose.pose.orientation.x = q_wr[0]
	robotpose.PoseWithCovarianceStamped.pose.pose.orientation.y = q_wr[1]
	robotpose.PoseWithCovarianceStamped.pose.pose.orientation.z = q_wr[2]
	robotpose.PoseWithCovarianceStamped.pose.pose.orientation.w = q_wr[3]
	robotpose.PoseWithCovarianceStamped.pose.covariance = [500,0,0,0,0,50,\
															0,50,0,0,0,10,\
															0,0,0,0,0,0,\
															0,0,0,0,0,0,\
															0,0,0,0,0,0,\
															50,10,0,0,0,500]
	pub = rospy.Publisher('/robot_pose',PoseWithCovarianceStamped,queue_size=1)
	
	R = rospy.Rate(10)
	while not rospy.is_shutdown():
		try:
			T = get_tag_tf(msg)
		except:
			continue
		if len(T) == 0:
			continue
		p_cw,q_cw = get_camera_tf(tags,T)
		br.sendTransform(p_cw,q_cw,rospy.Time.now(),"camera","world")
		# cr.sendTransform((0,0,0),q_cr,rospy.Time.now(),"robot","camera")
		pub.publish(robotpose)
		R.sleep()
	
	
if __name__ == '__main__':
	rospy.init_node('camera_localise_node')
	rospy.Subscriber("/tag_detections",AprilTagDetectionArray,send_camera_pose)
	rospy.spin()
	
